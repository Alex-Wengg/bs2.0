[
    {
        "id" : 1,
        "title" : "Two Sum",
        "text" : "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "file" : "two_sum.py",
        "output" : " eturn List[int]",
        "starter" : "def twoSum(nums: list[int], target: int) -> list[int]:"
    },
    {
        "id" : 42,
        "title" : "Trapping Rain Water",
        "text": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
        "file" : "trapping_rain_water.py",
        "output" : "return int",

        "starter" : "def trap(height: list[int]):" 
    }, 
   {
        "id" : 3,
        "title" : "Longest Substring Without Repeating Characters",
        "text": "Given a string s, find the length of the longest substring without repeating characters.",
        "file" : "longest_substring_without_repeating_characters.py",
        "output" : "return str",
        
        "starter" : "def lengthOfLongestSubstring(s: str):" 
    }, 
    {
        "id" : 5,
        "title" : "Longest Palindromic Substring",
        "text": "Given a string s,find the length of the longest substring without repeating characters.",
        "file" : "longest_palindromic_substring.py",
        "output" : "return str",

        "starter" : "def longestPalindrome(s: str):" 
    }, 
    {
        "id" : 15,
        "title" : " 3Sum",
        "text": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. \n  Notice that the solution set must not contain duplicate triplets.",
        "file" : "3sum.py",
        "output" : "return int[][]",
        
        "starter" : "def threeSum(nums: list[int):" 
    }
]